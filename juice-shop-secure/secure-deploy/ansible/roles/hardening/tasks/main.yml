# ===================================================================
# RÔLE HARDENING SYSTÈME - DURCISSEMENT SÉCURITAIRE COMPLET
# ===================================================================
#
# Ce rôle applique un ensemble de mesures de durcissement sécuritaire
# sur le système Ubuntu pour réduire la surface d'attaque et renforcer
# les défenses contre les intrusions.
#
# OBJECTIFS :
# - Configurer un firewall restrictif avec politique de déni par défaut
# - Durcir la configuration SSH pour limiter les vecteurs d'attaque
# - Installer et configurer des outils de protection automatique
# - Mettre en place la maintenance sécuritaire automatisée
#
# PRINCIPE : Défense en profondeur avec plusieurs couches de sécurité

---
# ===================== SECTION 1: CONFIGURATION RÉSEAU =====================
- name: CONFIGURATION PAREFEUX - Contrôle d'accès réseau strict
  block:
    # Activer UFW avec une politique restrictive par défaut
    # UFW (Uncomplicated Firewall) est l'interface simplifiée d'iptables sur Ubuntu
    # Politique "deny" = tout ce qui n'est pas explicitement autorisé est bloqué
    - name: Activer UFW avec politique restrictive
      ufw:
        state: enabled           # Active le firewall
        policy: deny            # DENY par défaut = sécurité maximale
        logging: medium         # Log les connexions bloquées pour analyse
      tags: firewall

    # Autoriser SSH pour l'administration à distance
    # CHOIX TECHNIQUE : Port 22 standard gardé pour compatibilité Vagrant
    # En production, on changerait le port SSH pour réduire les scans automatisés
    # COMMENTÉ car cause des problèmes avec Vagrant qui utilise des clés spécifiques
    # - name: Autoriser SSH depuis IP admin spécifique
    #   ufw:
    #     rule: allow
    #     port: "{{ ssh_port }}"
    #     proto: tcp
    #     src: "{{ admin_ip }}/32"  # Restriction par IP source

    # SOLUTION POUR VAGRANT : Autoriser SSH depuis toutes les IPs
    # En environnement de test, on garde l'accès SSH ouvert
    # Fail2ban se chargera de la protection contre le brute force
    - name: Autoriser SSH Vagrant
      ufw:
        rule: allow
        port: 22
        proto: tcp
      tags: firewall

    # Bloquer l'accès direct à Juice Shop (port 3000)
    # PRINCIPE : Forcer le passage par le reverse proxy nginx
    # Seul nginx doit pouvoir accéder directement à l'application
    - name: Bloquer accès direct à Juice Shop
      ufw:
        rule: deny
        port: 3000
        proto: tcp
      tags: firewall

    # Autoriser le trafic web standard via le reverse proxy
    # Port 443 HTTPS = accès principal sécurisé
    # Port 80 HTTP = redirection automatique vers HTTPS
    - name: Autoriser HTTPS
      ufw:
        rule: allow
        port: 443
        proto: tcp
      tags: firewall

    - name: Autoriser HTTP
      ufw:
        rule: allow
        port: 80
        proto: tcp
      tags: firewall
  tags: ["firewall"]

# ===================== SECTION 2: DURCISSEMENT SSH =====================
- name: DURCISSEMENT SSH - Sécurisation des accès administratifs
  block:
    # Changer le port SSH par défaut (COMMENTÉ pour Vagrant)
    # RAISON : Vagrant utilise des configurations SSH spécifiques
    # En production, changer le port SSH réduit drastiquement les scans automatisés
    # - name: Changer port SSH
    #   lineinfile:
    #     path: /etc/ssh/sshd_config
    #     regexp: '^#?Port'
    #     line: 'Port {{ ssh_port }}'
    #     backup: yes
    #     validate: '/usr/sbin/sshd -t -f %s'  # Validation syntaxe avant application

    # Forcer l'authentification par clé publique uniquement (COMMENTÉ pour Vagrant)
    # RAISON : Vagrant utilise parfois des mots de passe pour l'initialisation
    # En production, désactiver complètement l'auth par mot de passe
    # - name: Forcer authentification par clé
    #   lineinfile:
    #     path: /etc/ssh/sshd_config
    #     regexp: '^#?AuthenticationMethods'
    #     line: 'AuthenticationMethods publickey'
    #     validate: '/usr/sbin/sshd -t -f %s'

    # Limiter le nombre de tentatives d'authentification
    # 3 tentatives max avant déconnexion = équilibre usabilité/sécurité
    # Complété par Fail2ban qui bannit après plusieurs échecs
    - name: Limiter tentatives de connexion
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?MaxAuthTries'
        line: 'MaxAuthTries 3'
        validate: '/usr/sbin/sshd -t -f %s'  # Toujours valider la syntaxe
      tags: ssh

    # Désactiver les fonctionnalités SSH dangereuses ou inutiles
    # Ces options peuvent être exploitées pour des attaques ou du pivoting
    - name: Désactiver options SSH dangereuses
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?{{ item.key }}'
        line: '{{ item.value }}'
        validate: '/usr/sbin/sshd -t -f %s'
      loop:
        - { key: 'X11Forwarding', value: 'X11Forwarding no' }           # Pas de redirection X11
        - { key: 'AllowTcpForwarding', value: 'AllowTcpForwarding no' } # Pas de tunnels TCP
        - { key: 'PermitTunnel', value: 'PermitTunnel no' }             # Pas de tunnels réseau
        - { key: 'ClientAliveInterval', value: 'ClientAliveInterval 300' }  # Timeout session 5min
        - { key: 'ClientAliveCountMax', value: 'ClientAliveCountMax 2' }    # 2 vérifications max
      tags: ssh

    # Redémarrer SSH pour appliquer les nouvelles configurations
    # Le service SSH doit être redémarré pour prendre en compte les changements
    - name: Redémarrer SSH
      systemd:
        name: ssh
        state: restarted
      tags: ssh
  tags: ["ssh"]

# ===================== SECTION 3: OUTILS DE SÉCURITÉ =====================
- name: OUTILS DE PROTECTION - Installation et configuration des défenses automatiques
  block:
    # ----- SOUS-SECTION: Fail2Ban -----
    # Fail2ban protège contre les attaques par force brute en analysant les logs
    # ----- SOUS-SECTION: Fail2Ban -----
# Installation seulement - Configuration dans rôle dédié fail2ban
    - name: Installer Fail2Ban
      apt:
        name: fail2ban
        state: present
      tags: fail2ban

      
    # ----- SOUS-SECTION: AppArmor -----
    # AppArmor fournit un confinement obligatoire pour les applications
    - name: Installer et activer AppArmor
      block:
        # Installation des packages AppArmor et profils de sécurité
        - name: Installer AppArmor
          apt:
            name:
              - apparmor           # Moteur de confinement principal
              - apparmor-utils     # Utilitaires de gestion des profils
              - apparmor-profiles  # Profils prédéfinis pour applications courantes
            state: present
            update_cache: no      # Pas de mise à jour du cache (déjà fait)
          tags: apparmor

        # Activer le service AppArmor au démarrage
        # AppArmor doit être actif pour appliquer les restrictions
        - name: Activer AppArmor
          service:
            name: apparmor
            state: started        # Démarre maintenant
            enabled: true         # Active au boot
          tags: apparmor

        # Créer un profil AppArmor spécifique pour Docker
        # Ce profil limite ce que les containers Docker peuvent faire
        - name: Appliquer profil Docker AppArmor
          copy:
            dest: /etc/apparmor.d/docker
            content: |
              #include <tunables/global>
              profile docker flags=(attach_disconnected) {
                deny /etc/passwd rw,          # Interdit modification fichier utilisateurs
                deny /etc/shadow rw,          # Interdit modification mots de passe
                deny /root/** rw,             # Interdit accès au répertoire root
                capability dac_override,     # Autorise override des permissions fichiers
              }
            mode: '0644'
          notify: reload apparmor
          tags: apparmor
      
    # ----- SOUS-SECTION: Mises à jour automatiques -----
    # Les mises à jour automatiques corrigent les vulnérabilités rapidement
    - name: Activer mises à jour automatiques
      apt:
        name: unattended-upgrades  # Package pour mises à jour automatiques
        state: present
      tags: updates

    # Configuration des mises à jour automatiques pour sécurité uniquement
    - name: Configurer mises à jour automatiques
      copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          // Configuration mises à jour automatiques sécurisées
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}-security";     # Seulement mises à jour sécurité
          };
          Unattended-Upgrade::AutoFixInterruptedDpkg "true";  # Répare installations interrompues
          Unattended-Upgrade::MinimalSteps "true";            # Étapes minimales pour stabilité
          Unattended-Upgrade::Remove-Unused-Dependencies "true";  # Nettoie dépendances inutiles
          Unattended-Upgrade::Automatic-Reboot "false";       # Pas de redémarrage automatique
        mode: '0644'
      tags: updates
  tags: ["security-tools"]

