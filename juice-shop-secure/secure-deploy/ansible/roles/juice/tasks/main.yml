# ===================================================================
# D√âPLOIEMENT S√âCURIS√â DE JUICE SHOP
# ===================================================================
#
# Ce r√¥le d√©ploie l'application OWASP Juice Shop dans un container Docker
# avec des param√®tres de s√©curit√© renforc√©s pour la d√©monstration.
#
# Juice Shop est une application web volontairement vuln√©rable utilis√©e
# pour l'apprentissage de la s√©curit√©. On la s√©curise au niveau infrastructure
# tout en gardant ses vuln√©rabilit√©s internes pour les tests.
#
# CONFORMIT√â :
# - ISO 27001 A.14.1.3 : Protection des transactions de services applicatifs
# - ISO 27001 A.13.1.1 : Contr√¥les de r√©seau (isolation)
# - HDS Article 9 : Isolation des environnements

---
# Nettoyer les installations pr√©c√©dentes pour √©viter les conflits
# Si un ancien container Juice Shop existe, on le supprime proprement
# Le force_kill assure qu'on peut supprimer m√™me un container qui plante
- name: Arr√™ter conteneur Juice Shop existant
  docker_container:
    name: juice-shop
    state: absent
    force_kill: yes
  become: yes
  ignore_errors: yes  # On ignore les erreurs si aucun container n'existe
  tags: juice-shop

# Cr√©er un r√©seau Docker d√©di√© pour isoler Juice Shop
# L'isolation r√©seau emp√™che Juice Shop de communiquer avec d'autres containers
# C'est un principe de s√©curit√© : chaque application dans son propre r√©seau
- name: Cr√©er r√©seau Docker isol√©
  docker_network:
    name: "{{ juice_shop_network }}"
    driver: bridge          # Type de r√©seau standard pour un container unique
    state: present
  become: yes
  tags: juice-shop

# T√©l√©charger l'image officielle Juice Shop depuis Docker Hub
# On utilise des retry car le t√©l√©chargement peut √©chouer (probl√®me r√©seau)
# Timeout de 5 minutes car l'image fait environ 150MB
- name: T√©l√©charger image Juice Shop
  docker_image:
    name: "{{ juice_shop_image }}"
    tag: "{{ juice_shop_version }}"
    source: pull
    timeout: 300            # 5 minutes max pour t√©l√©charger
  become: yes
  retries: 3                # 3 tentatives si √©chec
  delay: 30                 # Attendre 30s entre chaque tentative
  register: pull_result
  until: pull_result is succeeded
  tags: juice-shop

# D√©marrer le container Juice Shop avec une configuration s√©curis√©e
# Cette config limite les ressources et applique des restrictions de s√©curit√©
- name: Lancer conteneur Juice Shop s√©curis√©
  docker_container:
    name: juice-shop
    image: "{{ juice_shop_image }}:{{ juice_shop_version }}"
    state: started
    restart_policy: unless-stopped  # Red√©marre automatiquement si crash
    
    # Configuration r√©seau : on expose seulement le port n√©cessaire
    # published_ports:
    #   - "{{ juice_shop_external_port }}:{{ juice_shop_internal_port }}"
    networks:
      - name: "{{ juice_shop_network }}"
    
    # Variables d'environnement pour configurer l'application
    env:
      NODE_ENV: production              # Mode production plus s√©curis√©
      PORT: "{{ juice_shop_internal_port | string }}"
      APPLICATION_CHATBOT: "false"     # D√©sactive le chatbot qui peut poser des probl√®mes
      CHATBOT_TRAINING_DATA: ""        # Pas de donn√©es de training
      SOLUTIONS_WEBHOOK: ""            # Pas de webhook externe
    
    # Limitation des ressources pour √©viter que l'app consomme tout le serveur
    memory: 512m                # Maximum 512MB de RAM
    memory_swap: 512m           # Pas de swap suppl√©mentaire
    cpu_quota: 50000            # Maximum 50% d'un CPU (sur 100000)
    
    # Param√®tres de s√©curit√© du container
    security_opts:
      - "no-new-privileges:true"        # Emp√™che l'escalade de privil√®ges
    
    # Syst√®me de fichiers temporaire s√©curis√©
    tmpfs:
      - /tmp:noexec,nosuid,size=100m    # /tmp en m√©moire, pas d'ex√©cution de fichiers
    
  become: yes
  register: juice_container
  tags: juice-shop

# Attendre que l'application soit compl√®tement d√©marr√©e
# Juice Shop prend quelques secondes √† initialiser apr√®s le d√©marrage du container
# - name: Attendre d√©marrage complet de Juice Shop
#   wait_for:
#     host: localhost
#     port: "{{ juice_shop_external_port }}"
#     timeout: 60             # Attendre maximum 1 minute
#   tags: juice-shop

# V√©rifier que l'application r√©pond correctement
# Test basique pour s'assurer que Juice Shop est accessible
# ignore_errors pour √©viter que le d√©ploiement plante si l'app n'est pas encore pr√™te
- name: V√©rifier que Juice Shop r√©pond
  uri:
    url: "http://localhost:{{ juice_shop_external_port }}"
    method: GET
    timeout: 10
  register: juice_check
  retries: 3
  delay: 5
  ignore_errors: yes       # Ne pas faire planter Ansible si l'app n'est pas pr√™te
  tags: juice-shop

# Rapport final du d√©ploiement avec status conditionnel
# Affiche les informations importantes m√™me si le test de sant√© a √©chou√©
- name: Rapport d√©ploiement Juice Shop
  debug:
    msg: |
      ================================
      JUICE SHOP D√âPLOY√â ET S√âCURIS√â
      ================================
      Status: {{ 'ACTIF' if (juice_check is defined and juice_check.status is defined and juice_check.status == 200) else 'EN COURS DE D√âMARRAGE' }}
      URL locale: http://localhost:{{ juice_shop_external_port }}
      Container ID: {{ juice_container.container.Id[:12] }}
      
      S√©curisations appliqu√©es:
      - Container isol√© dans r√©seau d√©di√©
      - Ressources limit√©es (512MB RAM, 50% CPU)
      - Pas d'escalade de privil√®ges
      - Syst√®me /tmp en m√©moire (noexec)
      - Red√©marrage automatique si crash
      
      {% if juice_check is defined and juice_check.status is defined and juice_check.status == 200 %}
      ‚úÖ Application accessible et fonctionnelle
      {% else %}
      ‚è≥ Application en cours de d√©marrage (normal)
      üí° R√©essayez dans quelques secondes si besoin
      {% endif %}
      ================================
  tags: juice-shop