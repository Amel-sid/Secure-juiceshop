#!/bin/bash

# ===================================================================
# SCRIPT DE VALIDATION S√âCURIS√â - OWASP JUICE SHOP
# ===================================================================
#
# Ce script automatise la validation compl√®te du d√©ploiement s√©curis√©
# de Juice Shop en testant l'infrastructure, la s√©curit√© et l'application.
#
# OBJECTIF :
# Fournir une validation automatis√©e et objective du niveau de s√©curit√©
# atteint par le d√©ploiement, avec scoring et conformit√© mesurable.
#
# TESTS COUVERTS :
# - Infrastructure (VM, SSH, services)
# - S√©curit√© (firewall, fail2ban, apparmor)
# - Containers (fonctionnement, restrictions)
# - R√©seau (acc√®s HTTPS, blocage direct)
# - Conformit√© (durcissement SSH, r√®gles firewall)

echo "=========================================="
echo "üöÄ OWASP Juice Shop Security Validation"
echo "=========================================="
echo ""

# Configuration des couleurs pour am√©liorer la lisibilit√© des r√©sultats
# Les couleurs aident √† identifier rapidement le statut des tests
GREEN='\033[0;32m'  # Vert pour les succ√®s (tests pass√©s)
RED='\033[0;31m'    # Rouge pour les √©checs (probl√®mes critiques)
YELLOW='\033[1;33m' # Jaune pour les avertissements (am√©liorations possibles)
NC='\033[0m'        # Reset couleur (retour normal)

# Variables de comptage pour le scoring final
# Ces m√©triques permettent de calculer un score objectif de s√©curit√©
TOTAL_TESTS=13      # Nombre total de tests d√©finis
PASSED_TESTS=0      # Compteur des tests r√©ussis
FAILED_TESTS=0      # Compteur des tests √©chou√©s
WARNING_TESTS=0     # Compteur des avertissements (non bloquants)

# Fonctions utilitaires pour standardiser l'affichage des r√©sultats
# Ces fonctions assurent un format coh√©rent et comptent automatiquement les r√©sultats
test_step() {
    echo -n "Testing $1... "
}

test_success() {
    echo -e "${GREEN}‚úÖ PASS${NC}"
    ((PASSED_TESTS++))          # Incr√©mente le compteur de succ√®s
}

test_fail() {
    echo -e "${RED}‚ùå FAIL${NC}"
    ((FAILED_TESTS++))          # Incr√©mente le compteur d'√©checs
}

test_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING${NC}"
    ((WARNING_TESTS++))         # Incr√©mente le compteur d'avertissements
}

echo "üìã Step 1: Infrastructure Validation"
echo "======================================"

# V√©rification pr√©liminaire : on doit √™tre dans le bon r√©pertoire
# Cette v√©rification √©vite des erreurs si le script est lanc√© depuis un mauvais endroit
if [ ! -d "vagrant" ]; then
    echo "‚ùå Erreur: Dossier vagrant/ non trouv√©"
    echo "   Ex√©cutez ce script depuis la racine du projet"
    exit 1
fi

# Test 1: Statut de la VM Vagrant
# V√©rifie que la machine virtuelle est en cours d'ex√©cution
# C'est un pr√©requis pour tous les autres tests
test_step "Vagrant VM status"
if cd vagrant && vagrant status | grep -q "running"; then
    test_success
    VM_RUNNING=true         # Variable utilis√©e pour les tests suivants
    cd ..
else
    test_fail
    VM_RUNNING=false
    cd ..
fi

# Test 2: Connectivit√© SSH vers la VM
# Teste la capacit√© √† ex√©cuter des commandes dans la VM
# N√©cessaire pour tous les tests de services internes
test_step "SSH connectivity to VM"
if cd vagrant && vagrant ssh -c "echo 'SSH OK'" 2>/dev/null | grep -q "SSH OK"; then
    test_success
    SSH_OK=true            # Variable critique pour les tests suivants
    cd ..
else
    test_fail
    SSH_OK=false
    cd ..
fi

echo ""
echo "üîí Step 2: Security Services Validation"
echo "======================================="

# Les tests de s√©curit√© ne peuvent s'ex√©cuter que si SSH fonctionne
# Cette approche √©vite des erreurs en cascade si l'infrastructure de base ne fonctionne pas
if [ "$SSH_OK" = true ]; then
    # Test 3: Service Docker
    # Docker doit √™tre actif pour faire fonctionner les containers de l'application
    test_step "Docker service"
    if cd vagrant && vagrant ssh -c "sudo systemctl is-active docker" 2>/dev/null | grep -q "active"; then
        test_success
        cd ..
    else
        test_fail
        cd ..
    fi

    # Test 4: Firewall UFW
    # UFW doit √™tre actif avec des r√®gles appropri√©es pour la s√©curit√© r√©seau
    # C'est une mesure de s√©curit√© fondamentale pour contr√¥ler les acc√®s
    test_step "UFW firewall"
    if cd vagrant && vagrant ssh -c "sudo ufw status" 2>/dev/null | grep -q "Status: active"; then
        test_success
        cd ..
    else
        test_fail
        cd ..
    fi

    # Test 5: Service Fail2ban
    # Fail2ban prot√®ge contre les attaques par force brute en bannissant les IP suspectes
    # Service critique pour la protection contre les intrusions automatis√©es
    test_step "Fail2ban service"
    if cd vagrant && vagrant ssh -c "sudo systemctl is-active fail2ban" 2>/dev/null | grep -q "active"; then
        test_success
        cd ..
    else
        test_fail
        cd ..
    fi

    # Test 6: AppArmor
    # AppArmor fournit un confinement obligatoire pour limiter les actions des applications
    # Protection suppl√©mentaire contre l'escalade de privil√®ges
    test_step "AppArmor profiles"
    if cd vagrant && vagrant ssh -c "sudo aa-status" 2>/dev/null | grep -q "profiles are loaded"; then
        test_success
        cd ..
    else
        test_fail
        cd ..
    fi
else
    echo "‚ö†Ô∏è  Skipping security tests - SSH not available"
    # Si SSH ne fonctionne pas, on compte les tests de s√©curit√© comme √©chou√©s
    # Cela assure que le score final refl√®te l'√©tat r√©el de la s√©curit√©
    ((FAILED_TESTS+=4))
fi

echo ""
echo "üê≥ Step 3: Container Validation"
echo "================================"

# Validation des containers Docker et de leur configuration s√©curis√©e
if [ "$SSH_OK" = true ]; then
    # Test 7: Container Juice Shop
    # V√©rifie que l'application principale fonctionne dans son container
    test_step "OWASP Juice Shop container"
    cd vagrant
    CONTAINER_CHECK=$(vagrant ssh -c "sudo docker ps" 2>/dev/null)
    cd ..
    if echo "$CONTAINER_CHECK" | grep -q "bkimminich/juice-shop\|juice-shop"; then
        test_success
        CONTAINER_RUNNING=true      # Variable utilis√©e dans le scoring final
    else
        test_fail
        CONTAINER_RUNNING=false
    fi

    # Test 8: Restrictions de s√©curit√© des containers
    # V√©rifie que les containers ont des param√®tres de s√©curit√© appropri√©s
    # (no-new-privileges, apparmor, etc.)
    test_step "Container security restrictions"
    cd vagrant
    SECURITY_CHECK=$(vagrant ssh -c "sudo docker inspect juice-shop 2>/dev/null | grep -i security" 2>/dev/null)
    cd ..
    if [ -n "$SECURITY_CHECK" ]; then
        test_success
    else
        # Warning plut√¥t que fail car le container peut fonctionner sans certaines restrictions
        test_warning
    fi
else
    echo "‚ö†Ô∏è  Skipping container tests - SSH not available"
    ((FAILED_TESTS+=2))
fi

echo ""
echo "üåê Step 4: Network & Application Tests"
echo "====================================="

# Test 9: Blocage de l'acc√®s direct
# V√©rifie que le port 3000 (Juice Shop) n'est pas accessible directement
# Principe de s√©curit√© : forcer le passage par le reverse proxy nginx
test_step "Direct access blocking (port 3000)"
if timeout 5 curl -s http://localhost:3000 2>/dev/null; then
    test_fail
    echo "    ‚ùå Direct access should be blocked!"
else
    # L'acc√®s direct doit √™tre bloqu√© = c'est un succ√®s pour la s√©curit√©
    test_success
fi

# Test 10: Acc√®s HTTPS s√©curis√©
# V√©rifie que l'application est accessible via HTTPS sur le port configur√©
# C'est le mode d'acc√®s principal et s√©curis√© pour les utilisateurs
test_step "HTTPS access (port 4443)"
if curl -k -s -o /dev/null -w "%{http_code}" https://localhost:4443 2>/dev/null | grep -q "200"; then
    test_success
    HTTPS_OK=true              # Variable critique pour le scoring final
else
    test_fail
    HTTPS_OK=false
fi

# Test 11: Configuration TLS
# V√©rifie que le chiffrement TLS est correctement configur√©
# Test de la version TLS minimale accept√©e (TLSv1.2)
test_step "TLS configuration"
if openssl s_client -connect localhost:4443 -tls1_2 < /dev/null 2>/dev/null | grep -q "TLSv1.2"; then
    test_success
else
    # Warning car TLS peut fonctionner m√™me sans version sp√©cifique d√©tect√©e
    test_warning
fi

echo ""
echo "üìä Step 5: Security Compliance Check"
echo "===================================="

# Tests de conformit√© s√©curitaire - v√©rification des bonnes pratiques
if [ "$SSH_OK" = true ]; then
    # Test 12: Conformit√© des r√®gles firewall
    # V√©rifie que les r√®gles UFW sont correctement configur√©es
    test_step "Firewall rules compliance"
    cd vagrant
    FIREWALL_RULES=$(vagrant ssh -c "sudo ufw status numbered" 2>/dev/null)
    cd ..
    if echo "$FIREWALL_RULES" | grep -q "DENY.*3000"; then
        # R√®gle sp√©cifique trouv√©e : parfait
        test_success
    else
        # V√©rification de fallback : au moins le firewall est actif
        if echo "$FIREWALL_RULES" | grep -q "Status: active"; then
            test_success
        else
            test_warning
        fi
    fi

    # Test 13: Durcissement SSH
    # V√©rifie que la configuration SSH suit les bonnes pratiques de s√©curit√©
    test_step "SSH hardening"
    cd vagrant
    SSH_CONFIG=$(vagrant ssh -c "sudo sshd -T" 2>/dev/null)
    cd ..
    # V√©rification de param√®tres critiques : limitation tentatives + d√©sactivation X11
    if echo "$SSH_CONFIG" | grep -q "maxauthtries 3" && echo "$SSH_CONFIG" | grep -q "x11forwarding no"; then
        test_success
    else
        # Warning car SSH peut fonctionner m√™me sans tous les param√®tres optimaux
        test_warning
    fi
else
    echo "‚ö†Ô∏è  Skipping compliance tests - SSH not available"
    ((FAILED_TESTS+=2))
fi

echo ""
echo "üéØ VALIDATION SUMMARY"
echo "===================="

# Calcul du score de s√©curit√© bas√© sur le pourcentage de tests r√©ussis
# Formule : (tests pass√©s / total tests) * 100
SECURITY_SCORE=$(( (PASSED_TESTS * 100) / TOTAL_TESTS ))

echo "üìä Test Results:"
echo "   ‚úÖ Passed: $PASSED_TESTS/$TOTAL_TESTS"
echo "   ‚ùå Failed: $FAILED_TESTS/$TOTAL_TESTS"
echo "   ‚ö†Ô∏è  Warnings: $WARNING_TESTS/$TOTAL_TESTS"
echo ""
echo "üìà Security Score: ${SECURITY_SCORE}%"
echo ""

# √âvaluation des crit√®res critiques pour validation finale
# Ces 4 composants sont indispensables pour consid√©rer le d√©ploiement comme r√©ussi
CRITICAL_PASSED=0
if [ "$VM_RUNNING" = true ]; then ((CRITICAL_PASSED++)); fi      # Infrastructure de base
if [ "$SSH_OK" = true ]; then ((CRITICAL_PASSED++)); fi          # Acc√®s pour administration
if [ "$CONTAINER_RUNNING" = true ]; then ((CRITICAL_PASSED++)); fi # Application fonctionnelle
if [ "$HTTPS_OK" = true ]; then ((CRITICAL_PASSED++)); fi        # Acc√®s s√©curis√© utilisateur

# Validation finale : crit√®res critiques + score minimum
# Seuil de 85% pour consid√©rer le d√©ploiement comme s√©curis√©
if [ $CRITICAL_PASSED -eq 4 ] && [ $SECURITY_SCORE -ge 85 ]; then
    echo -e "${GREEN}üéâ DEPLOYMENT VALIDATION: SUCCESS${NC}"
    echo -e "${GREEN}‚úÖ Infrastructure is secure and operational${NC}"
    echo -e "${GREEN}‚úÖ Security compliance verified${NC}"
    echo ""
    echo "üåê Access your secure OWASP Juice Shop:"
    echo "   https://localhost:4443"
    echo ""
    echo "üîß For detailed analysis:"
    echo "   cd vagrant && vagrant ssh"
    echo "   sudo ufw status verbose"
    echo "   docker logs juice-shop"
else
    echo -e "${RED}‚ùå DEPLOYMENT VALIDATION: FAILED${NC}"
    echo -e "${RED}‚ö†Ô∏è  Some critical components are not working${NC}"
    echo ""
    echo "üîß Troubleshooting steps:"
    # Guidance sp√©cifique bas√©e sur les composants qui ont √©chou√©
    if [ "$VM_RUNNING" = false ]; then
        echo "   - Run: cd vagrant && vagrant up"
    fi
    if [ "$SSH_OK" = false ]; then
        echo "   - Check: cd vagrant && vagrant ssh"
    fi
    if [ "$CONTAINER_RUNNING" = false ]; then
        echo "   - Run: cd vagrant && vagrant ssh -c 'sudo docker ps'"
    fi
    if [ "$HTTPS_OK" = false ]; then
        echo "   - Check: curl -k https://localhost:4443"
    fi
fi

echo ""
echo "üìö For complete documentation, see README.md"
echo "=========================================="